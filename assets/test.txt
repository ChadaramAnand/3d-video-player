import React, { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform, Alert } from 'react-native';
import * as MediaLibrary from 'expo-media-library';
import * as DocumentPicker from 'expo-document-picker';

type Album = MediaLibrary.Album;
type Asset = MediaLibrary.Asset;

export default function VideoBrowser() {
    const [albums, setAlbums] = useState<Album[]>([]);
    const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();
    const [pickedVideos, setPickedVideos] = useState<{ uri: string }[]>([]);

    // Fetch albums when the component mounts
    useEffect(() => {
        getAlbums();
    }, []);

    async function getAlbums() {
        if (permissionResponse?.status !== 'granted') {
            const response = await requestPermission();
            if (response?.status !== 'granted') {
                Alert.alert('Permission Required', 'App needs access to media library to show video albums.');
                return;
            }
        }

        const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
            includeSmartAlbums: true,
        });

        setAlbums(fetchedAlbums);
    }

    async function pickVideo() {
        const result = await DocumentPicker.getDocumentAsync({
            type: 'video/*',
        });

        if (result.assets && result.assets.length > 0) {
          const selectedVideo = result.assets[0];  // Access the first selected video
          setPickedVideos((prev) => [...prev, { uri: selectedVideo.uri }]);
        } else {
            console.log('User cancelled video picking');
        }
    }

    return (
        <SafeAreaView style={styles.container}>
            <Button onPress={getAlbums} title="Refresh Albums" />
            <Button onPress={pickVideo} title="Pick Video from Files" />
            <ScrollView>
                <Text style={styles.sectionTitle}>Video Albums</Text>
                {albums.map((album) => (
                    <AlbumEntry key={album.id} album={album} />
                ))}

                <Text style={styles.sectionTitle}>Picked Videos (Document Picker)</Text>
                <View style={styles.videoList}>
                    {pickedVideos.map((video, index) => (
                        <View key={index} style={styles.pickedVideoContainer}>
                            <Text style={styles.videoText}>Picked Video {index + 1}</Text>
                            <Text style={styles.videoUri}>{video.uri}</Text>
                        </View>
                    ))}
                </View>
            </ScrollView>
        </SafeAreaView>
    );
}

type AlbumEntryProps = {
    album: Album;
};

function AlbumEntry({ album }: AlbumEntryProps) {
    const [assets, setAssets] = useState<Asset[]>([]);

    useEffect(() => {
        async function getAlbumAssets() {
            const albumAssets = await MediaLibrary.getAssetsAsync({
                album,
                mediaType: ['video'],  // Only fetch videos
            });

            console.log(`Assets in album ${album.title}:`, albumAssets.assets);
            setAssets(albumAssets.assets);
        }

        getAlbumAssets();
    }, [album]);

    return (
        <View key={album.id} style={styles.albumContainer}>
            <Text>{album.title} - {album.assetCount ?? 'no'} assets</Text>
            <View style={styles.albumAssetsContainer}>
                {assets.map((asset) => (
                    <Image
                        key={asset.id}
                        source={{ uri: asset.uri }}
                        style={styles.thumbnail}
                    />
                ))}
            </View>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        gap: 8,
        justifyContent: 'center',
        paddingTop: Platform.OS === 'android' ? 40 : 0,
    },
    sectionTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        marginVertical: 10,
        paddingHorizontal: 10,
    },
    albumContainer: {
        paddingHorizontal: 20,
        marginBottom: 12,
        gap: 4,
    },
    albumAssetsContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
    },
    thumbnail: {
        width: 50,
        height: 50,
        marginRight: 4,
    },
    videoList: {
        paddingHorizontal: 10,
    },
    pickedVideoContainer: {
        padding: 10,
        marginVertical: 5,
        backgroundColor: '#f0f0f0',
        borderRadius: 8,
    },
    videoText: {
        fontWeight: 'bold',
    },
    videoUri: {
        fontSize: 12,
        color: 'gray',
    },
});
